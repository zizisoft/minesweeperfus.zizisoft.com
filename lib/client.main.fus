fus 2.1.0
import "babel-polyfill"
import "./shared.manifest" all

shared: import "site/shared"
import "./shared.main"
client: import "site/client"
ui: client.ui
lit: client.lit

parseElement: s -> DOMParser().parseFromString(s, "application/xml").documentElement

if navigator.vendor = "Google Inc." or navigator.vendor = "Apple Computer, Inc."
    ui.enableAntiFraction()
ui.setRem(0.018)
ui.root
.setFontFamily(
    "\"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", \"Lucida Sans Unicode\", "
    + "\"Lantinghei SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", SimHei, sans-serif"
).setPaint("rgb(255,255,255)").setStrokeWidth(0.06)

client.onLoad(<>
    Promise.all[
        web.binaryGet("/3rd-party/SourceCodePro-Regular.otf.woff")
        web.binaryGet("/3rd-party/kaushan-script.woff")
    ].then(x ->
        sourceCodeProUri: "data:application/font-woff;base64," + x.0.body..toBase64()
        kaushanScriptUri: "data:application/font-woff;base64," + x.1.body..toBase64()
        woffStyleElement: parseElement("
            <style type="text/css" xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
                @font-face {
                    font-family: "SourceCodeProWoff";
                    font-style: normal;
                    font-weight: 400;
                    src: url(\(sourceCodeProUri)) format("woff");
                }
                @font-face {
                    font-family: "Kaushan Script";
                    font-style: normal;
                    font-weight: 400;
                    src: local("Kaushan Script"), local("KaushanScript-Regular"), url(\(kaushanScriptUri)) format("woff");
                }
            ]]></style>
        ")
        document.head.appendChild(woffStyleElement)

        homeScene: ui.Stack(
            {backgroundPaint: "rgb(0,0,0)", scale: 0.001}
            ui.Stack(
                {grow: 1, shrink: 1}
                ui.Text(lit.title, {fontSize: 3, textAlignment: "center"})
            ) as bar
            ui.Board{aspectRatio: 1} as board
        )
        sceneBox: ui.SceneBox(homeScene)
        ui.root.add(sceneBox)

        resizeHandler: <>
            if ui.root.computeWidth() < ui.root.computeHeight()
                homeScene.setHorizontal(false)
                bar.setHorizontal(true)
                board.setSize(1, "auto")
            else
                homeScene.setHorizontal(true)
                bar.setHorizontal(false)
                board.setSize("auto", 1)
        ui.onResize(resizeHandler)
        resizeHandler()

        sceneBox.showScene(
            homeScene
            (a, b, box, duration, timingFunction) ->
                b.setScale(0.001).show()
                (
                    if a'ok
                        a.animate{
                            to: {scale: 5, opacity: 0}
                            duration: duration / 2
                            timingFunction: "ease-in"
                        }
                    else
                        Promise.resolve()
                ).then(<>
                    b.animate{
                        to: {scale: 1}
                        duration: duration / 2
                        timingFunction: "cubic-bezier(0, 1, 0.8, 1.3)"
                    }
                ).then(<>
                    if a'ok
                        a.setScale(1).setOpacity(1)
                )
            1200
        )
    )
)
