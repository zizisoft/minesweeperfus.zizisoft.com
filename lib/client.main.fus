fus 2.1.0
import "babel-polyfill"
import "./shared.manifest" all

shared: import "site/shared"
import "./shared.main"
client: import "site/client"
ui: client.ui
lit: client.lit

parseElement: s -> DOMParser().parseFromString(s, "application/xml").documentElement

if navigator.vendor = "Google Inc." or navigator.vendor = "Apple Computer, Inc."
    ui.enableAntiFraction()
ui.setRem(0.018)
ui.root
.setFontFamily(
    "\"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", \"Lucida Sans Unicode\", "
    + "\"Lantinghei SC\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", SimHei, sans-serif"
).setPaint("rgb(255,255,255)").setStrokeWidth(0.06)

client.onLoad(<>
    Promise.all[
        web.binaryGet("/3rd-party/SourceCodePro-Regular.otf.woff")
        web.binaryGet("/3rd-party/kaushan-script.woff")
    ].then(resources ->
        sourceCodeProUri: "data:application/font-woff;base64," + resources.0.body..toBase64()
        kaushanScriptUri: "data:application/font-woff;base64," + resources.1.body..toBase64()
        woffStyleElement: parseElement("
            <style type="text/css" xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
                @font-face {
                    font-family: "SourceCodeProWoff";
                    font-style: normal;
                    font-weight: 400;
                    src: url(\(sourceCodeProUri)) format("woff");
                }
                @font-face {
                    font-family: "Kaushan Script";
                    font-style: normal;
                    font-weight: 400;
                    src: local("Kaushan Script"), local("KaushanScript-Regular"), url(\(kaushanScriptUri)) format("woff");
                }
            ]]></style>
        ")
        document.head.appendChild(woffStyleElement)

        homeScene: ui.Stack(
            {backgroundPaint: "rgb(0,0,0)", scale: 0.001}
            ui.Stack(
                {grow: 1, shrink: 1}
                ui.Text(lit.title, {fontSize: 3, textAlignment: "center"})
                ui.Button(lit.newGame, {
                    fontSize: 2.4
                    border: {width: "0.1em", paint: "rgb(255,255,255)"}
                    padding: ui.Padding("0.75em", "0.75em")
                    click: <>
                        randomBooleans: spread(true, 10).concat(spread(false, 71))..random()
                        loop(9, x -> loop(9, y ->
                            board.(x).(y).hasMine: randomBooleans.(x * 9 + y)
                            board.(x).(y).swept: false
                        ))
                        getMineCount: (x, y) ->
                            0 <= x < 9 and 0 <= y < 9 and board.(x).(y).hasMine ? 1 | 0
                        loop(9, x -> loop(9, y ->
                            board.(x).(y).number:
                                getMineCount(x - 1, y)
                                + getMineCount(x + 1, y)
                                + getMineCount(x, y - 1)
                                + getMineCount(x, y + 1)
                                + getMineCount(x - 1, y - 1)
                                + getMineCount(x + 1, y - 1)
                                + getMineCount(x - 1, y + 1)
                                + getMineCount(x + 1, y + 1)
                        ))
                }) as newGameButton
            ) as bar
            ui.Board(
                {aspectRatio: 1}
                repeat(9, x -> repeat(9, y ->
                    ui.Board(
                        {
                            x: (x + 0.5) / 9
                            y: (y + 0.5) / 9
                            width: 1 / 9
                            height: 1 / 9
                            border: ui.Border{width: "0.1rem", paint: "rgb(255,255,255)"}
                            click: <>
                                if not board.(x).(y).swept
                                    if board.(x).(y).hasMine
                                        board.forEach(m -> m.forEach(n ->
                                            n.swept: true
                                        ))
                                    else
                                        board.(x).(y).swept: true
                                        if board.(x).(y).number = 0
                                            fire: (m, n) ->
                                                if 0 <= m < 9 and 0 <= n < 9
                                                    cells.(m * 9 + n).onClick.fire()
                                            fire(x - 1, y)
                                            fire(x + 1, y)
                                            fire(x, y - 1)
                                            fire(x, y + 1)
                                            fire(x - 1, y - 1)
                                            fire(x + 1, y - 1)
                                            fire(x - 1, y + 1)
                                            fire(x + 1, y + 1)
                        }
                        ui.Text("")
                    )
                ))..flatten() as cells
            ) as uiBoard
        )
        sceneBox: ui.SceneBox(homeScene)
        ui.root.add(sceneBox)

        board: repeat(9, <> repeat(9, <> {hasMine: false, swept: false, number: 0}))
        loop(9, x -> loop(9, y ->
            Observer(<>
                board.(x).(y).swept
            ).onUpdate(event ->
                cells.(x * 9 + y).getChildren().0.setSource(
                    if event.value
                        board.(x).(y).hasMine ? "true" | board.(x).(y).number
                    else
                        ""
                )
            )
        ))
        newGameButton.onClick.fire()

        resizeHandler: <>
            if ui.root.computeWidth() < ui.root.computeHeight()
                homeScene.setHorizontal(false)
                bar.setHorizontal(true)
                uiBoard.setSize(1, "auto")
            else
                homeScene.setHorizontal(true)
                bar.setHorizontal(false)
                uiBoard.setSize("auto", 1)
        ui.onResize(resizeHandler)
        resizeHandler()

        sceneBox.showScene(
            homeScene
            (a, b, box, duration, timingFunction) ->
                b.setScale(0.001).show()
                (
                    if a'ok
                        a.animate{
                            to: {scale: 5, opacity: 0}
                            duration: duration / 2
                            timingFunction: "ease-in"
                        }
                    else
                        Promise.resolve()
                ).then(<>
                    b.animate{
                        to: {scale: 1}
                        duration: duration / 2
                        timingFunction: "cubic-bezier(0, 1, 0.8, 1.3)"
                    }
                ).then(<>
                    if a'ok
                        a.setScale(1).setOpacity(1)
                )
            1200
        )
    )
)
